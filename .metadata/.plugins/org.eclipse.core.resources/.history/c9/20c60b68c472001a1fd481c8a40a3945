//This is the content of client. CustomerRPCClient.java file.
package client;
import javax.xml.namespace.QName;
import org.apache.axis2.AxisFault;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.client.Options;
import org.apache.axis2.rpc.client.RPCServiceClient;

import ws.customer.data.Customer;

public class CustomerRPCClient {
    
    
    private static void updateCustomer(RPCServiceClient serviceClient, int customerID, float shoppingAmount) {
         // Here we get the customer information
      
        QName opUpdateCustomer = new QName("http://service.customer.ws", "updateCustomer");
        Object[] opUpdateCustomerArgs = new Object[] { customerID, shoppingAmount };
        
        @SuppressWarnings("unchecked")
        Class<String>[] returnTypes = new Class[] { String.class };
        Object[] response=null;
        try {
            response = serviceClient.invokeBlocking(opUpdateCustomer, opUpdateCustomerArgs, returnTypes);
        } catch (AxisFault e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        String result =  response[0].toString();
        
        // Here we displaying the result
        System.out.println(result);
        
    }
    private static void getByExpense(RPCServiceClient serviceClient, float lowerBound, float upperBound) {
    	QName opGetCustomerG = new QName("http://service.customer.ws", "getByExpense");
    	Object[]opGetCustomerGSArgs = new Object[] {lowerBound, upperBound};
    	Class[] returnTypes = new Class[] {Customer[].class};
    	Object[] response = null;

    	try {
    		response = serviceClient.invokeBlocking(opGetCustomerG, opGetCustomerGSArgs, returnTypes);
    		Customer[] c =(Customer[]) response[0];
        	for(int i=0; i<c.length; i++){
        		System.out.println(c[i].getCustomerID() + " " + c[i].getShoppingAmount());
        	}
    	} catch (AxisFault e) {
    		e.printStackTrace();
    	}


    	
    }
    public static void main(String[] args1) throws AxisFault {
        RPCServiceClient serviceClient = new RPCServiceClient();
        Options options = serviceClient.getOptions();
        // EndpointReference targetEPR = new
        // EndpointReference("http://localhost:8080/axis2/services/CustomerService");
        EndpointReference targetEPR = new EndpointReference("http://app3.cc.puv.fi/axis2_179/services/e1801917_assignment1");
        options.setTo(targetEPR);
        int[] ids = { 34000, 35000, 36000 };
        String[] names = { "Siirus", "Sasha", "Lizzie" };
        float[] shoppinGAmounts = { 123.54f, 320.40f, 58.89f };
        boolean[] priviliged = { true, true, false };
        int[] discountPercentages = { 3, 10, 2 };
        // Setting the customer information
        QName opSetCustomer = new QName("http://service.customer.ws", "setCustomer");
    
        Object[] opSetCustomerArgs = null;
        
        for (int i = 0; i < ids.length; i++) {
            opSetCustomerArgs = new Object[] { names[i], ids[i], shoppinGAmounts[i], priviliged[i],discountPercentages[i]  };
            // We call invokeRobust() method if we wouldn't expect any response from
            // the server
             serviceClient.invokeRobust(opSetCustomer, opSetCustomerArgs);
            // We call invokeBlocking() method if the we expect a value from the web service
            /*
             * Class[] setCustomerReturnTypes = new Class[] { Integer.class };
              Object[] setCustomerResponse = serviceClient.invokeBlocking(opSetCustomer,
             * opSetCustomerArgs, setCustomerReturnTypes);
             *
             * System.out.println("Number of customers on the server: " + (Integer)
             * setCustomerResponse[0]);
             */
        }
        // Here we get the customer information
        int id = 35000;
        QName opGetCustomer = new QName("http://service.customer.ws", "getCustomer");
        Object[] opGetCustomerArgs = new Object[] { id };
        
        @SuppressWarnings("unchecked")
        Class<String>[] returnTypes = new Class[] { String.class };
        Object[] response = serviceClient.invokeBlocking(opGetCustomer, opGetCustomerArgs, returnTypes);
        String result =  response[0].toString();
        
        // Here we displaying the result
        System.out.println(result);
        
        float newShoppingAmount=5000;
        
        System.out.println("Updateing cusomer with id=" + id + " with shopping amount=" + newShoppingAmount);
        
        updateCustomer(serviceClient, id, newShoppingAmount);
        
        float lower = 999, upper = 100000;
        getByExpense(serviceClient, lower, upper);
 
    }
}